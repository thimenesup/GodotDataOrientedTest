#!python
import os

library_name = ARGUMENTS.get("library_name", "gdnative_lib")

target = ARGUMENTS.get("target", "debug")
platform = ARGUMENTS.get("platform", "windows")
bits = ARGUMENTS.get("bits", 64)
sources = ARGUMENTS.get("sources", "")

final_lib_path = 'bin/'

# This makes sure to keep the session environment variables on windows, 
# that way you can run scons in a vs 2017 prompt and it will find all the required tools
env = Environment()
if platform == "windows":
    env = Environment(ENV = os.environ)

def add_sources(sources, directory):
    for file in os.listdir(directory):
        if file.endswith('.cpp'):
            sources.append(directory + '/' + file)

if platform == "osx":
    final_lib_path = final_lib_path + 'osx/'

    env.Append(CCFLAGS = ['-g','-O3', '-arch', 'x86_64', '-std=c++17'])
    env.Append(LINKFLAGS = ['-arch', 'x86_64'])

elif platform == "linux":
    final_lib_path = final_lib_path + 'x11/'

    env.Append(CCFLAGS = ['-fPIC', '-g','-O3', '-std=c++17'])

elif platform == "windows":
    final_lib_path = final_lib_path + 'win' + str(bits) + '/'

    if target == "debug":
        env.Append(CCFLAGS = ['-O2','-EHsc', '-D_DEBUG', '-MDd', "/std:c++17", "/openmp"])
        env['PDB'] = final_lib_path + library_name + '.pdb'
    else:
        env.Append(CCFLAGS = ['-O2', '-EHsc', '-DNDEBUG', '-MD', "/std:c++17", "/openmp"])


godot_headers = os.environ.get('GDNATIVE_HEADERS', '') + '/'
cpp_bindings = os.environ.get('GDNATIVE_CPP_BINDINGS', '') + '/'

env.Append(CPPPATH=['.', 'src/', godot_headers, cpp_bindings + 'include/', cpp_bindings + 'include/core/', cpp_bindings + 'include/gen/'])
env.Append(LIBPATH=[cpp_bindings + "/bin"])
env.Append(LIBS=["cpp_bindings" + "." + platform + "." + target + "." + str(bits)])

if sources == "": #Compile all
    sources = []
    add_sources(sources, "src")
else: #Compile targeted source
    library_name = sources
    sources = ["src/" + sources + ".cpp"]

library = env.SharedLibrary(target=final_lib_path + library_name, source=sources)
Default(library)